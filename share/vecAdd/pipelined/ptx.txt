//
// Generated by LLVM NVPTX Back-End
//

.version 8.3
.target sm_90a
.address_size 64

	// .globl	add_kernel_0d1d2d3de
.extern .shared .align 1 .b8 global_smem[];

.visible .entry add_kernel_0d1d2d3de(
	.param .u64 add_kernel_0d1d2d3de_param_0,
	.param .u64 add_kernel_0d1d2d3de_param_1,
	.param .u64 add_kernel_0d1d2d3de_param_2,
	.param .u32 add_kernel_0d1d2d3de_param_3
)
.maxntid 32, 1, 1
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<255>;
	.reg .f32 	%f<49>;
	.reg .b64 	%rd<122>;
	.loc	1 35 0
$L__func_begin0:
	.loc	1 35 0

	ld.param.u32 	%r16, [add_kernel_0d1d2d3de_param_3];
	ld.param.u64 	%rd4, [add_kernel_0d1d2d3de_param_2];
	ld.param.u64 	%rd3, [add_kernel_0d1d2d3de_param_1];
	ld.param.u64 	%rd2, [add_kernel_0d1d2d3de_param_0];
$L__tmp0:
	.loc	1 52 54
	mov.u32 	%r135, %tid.x;
	shl.b32 	%r136, %r135, 2;
	and.b32  	%r137, %r136, 124;
	or.b32  	%r138, %r137, 128;
	or.b32  	%r139, %r137, 256;
	or.b32  	%r140, %r137, 384;
	.loc	1 45 24
	// begin inline asm
	mov.u32 %r17, %ctaid.x;
	// end inline asm
	.loc	1 50 24
	shl.b32 	%r1, %r17, 11;
	.loc	1 52 41
	or.b32  	%r2, %r1, %r137;
	or.b32  	%r141, %r1, %r138;
	or.b32  	%r142, %r1, %r139;
	or.b32  	%r143, %r1, %r140;
	.loc	1 54 25
	setp.lt.s32 	%p59, %r2, %r16;
	setp.lt.s32 	%p58, %r141, %r16;
	setp.lt.s32 	%p57, %r142, %r16;
	setp.lt.s32 	%p56, %r143, %r16;
	.loc	1 57 28
	mul.wide.s32 	%rd61, %r2, 4;
	add.s64 	%rd5, %rd2, %rd61;
	cvt.s64.s32 	%rd62, %r1;
	cvt.u64.u32 	%rd1, %r137;
	or.b64  	%rd63, %rd62, %rd1;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd65, %rd2, %rd64;
	add.s64 	%rd6, %rd65, 512;
	add.s64 	%rd7, %rd65, 1024;
	add.s64 	%rd8, %rd65, 1536;
	.loc	1 57 20
	and.b32  	%r144, %r136, 28;
	shl.b32 	%r145, %r137, 2;
	mov.u32 	%r132, global_smem;
	add.s32 	%r18, %r132, %r145;
	and.b32  	%r146, %r138, 224;
	or.b32  	%r3, %r146, %r144;
	shl.b32 	%r147, %r3, 2;
	add.s32 	%r20, %r132, %r147;
	and.b32  	%r148, %r139, 352;
	or.b32  	%r4, %r148, %r144;
	shl.b32 	%r149, %r4, 2;
	add.s32 	%r22, %r132, %r149;
	and.b32  	%r150, %r140, 480;
	or.b32  	%r5, %r150, %r144;
	shl.b32 	%r151, %r5, 2;
	add.s32 	%r24, %r132, %r151;
	selp.b32 	%r19, 16, 0, %p59;
	// begin inline asm
	cp.async.cg.shared.global [ %r18 + 0 ], [ %rd5 + 0 ], 0x10, %r19;
	// end inline asm
	selp.b32 	%r21, 16, 0, %p58;
	// begin inline asm
	cp.async.cg.shared.global [ %r20 + 0 ], [ %rd6 + 0 ], 0x10, %r21;
	// end inline asm
	selp.b32 	%r23, 16, 0, %p57;
	// begin inline asm
	cp.async.cg.shared.global [ %r22 + 0 ], [ %rd7 + 0 ], 0x10, %r23;
	// end inline asm
	selp.b32 	%r25, 16, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r24 + 0 ], [ %rd8 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd9, %rd3, %rd61;
	add.s64 	%rd66, %rd3, %rd64;
	add.s64 	%rd10, %rd66, 512;
	add.s64 	%rd11, %rd66, 1024;
	add.s64 	%rd12, %rd66, 1536;
	.loc	1 58 20
	add.s32 	%r131, %r132, 14336;
	add.s32 	%r26, %r131, %r145;
	add.s32 	%r28, %r131, %r147;
	add.s32 	%r30, %r131, %r149;
	add.s32 	%r32, %r131, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r26 + 0 ], [ %rd9 + 0 ], 0x10, %r19;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r28 + 0 ], [ %rd10 + 0 ], 0x10, %r21;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r30 + 0 ], [ %rd11 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r32 + 0 ], [ %rd12 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 52 32
	or.b32  	%r152, %r1, 512;
	.loc	1 52 41
	or.b32  	%r153, %r152, %r137;
	or.b32  	%r154, %r152, %r138;
	or.b32  	%r155, %r152, %r139;
	or.b32  	%r156, %r152, %r140;
	.loc	1 54 25
	setp.lt.s32 	%p55, %r153, %r16;
	setp.lt.s32 	%p54, %r154, %r16;
	setp.lt.s32 	%p53, %r155, %r16;
	setp.lt.s32 	%p52, %r156, %r16;
	.loc	1 57 28
	add.s64 	%rd13, %rd65, 2048;
	cvt.u64.u32 	%rd67, %r138;
	or.b64  	%rd68, %rd62, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd2, %rd69;
	add.s64 	%rd14, %rd70, 2048;
	cvt.u64.u32 	%rd71, %r139;
	or.b64  	%rd72, %rd62, %rd71;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd2, %rd73;
	add.s64 	%rd15, %rd74, 2048;
	cvt.u64.u32 	%rd75, %r140;
	or.b64  	%rd76, %rd62, %rd75;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd78, %rd2, %rd77;
	add.s64 	%rd16, %rd78, 2048;
	.loc	1 57 20
	add.s32 	%r157, %r132, 2048;
	add.s32 	%r34, %r157, %r145;
	add.s32 	%r36, %r157, %r147;
	add.s32 	%r38, %r157, %r149;
	add.s32 	%r40, %r157, %r151;
	selp.b32 	%r35, 16, 0, %p55;
	// begin inline asm
	cp.async.cg.shared.global [ %r34 + 0 ], [ %rd13 + 0 ], 0x10, %r35;
	// end inline asm
	selp.b32 	%r37, 16, 0, %p54;
	// begin inline asm
	cp.async.cg.shared.global [ %r36 + 0 ], [ %rd14 + 0 ], 0x10, %r37;
	// end inline asm
	selp.b32 	%r39, 16, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r38 + 0 ], [ %rd15 + 0 ], 0x10, %r39;
	// end inline asm
	selp.b32 	%r41, 16, 0, %p52;
	// begin inline asm
	cp.async.cg.shared.global [ %r40 + 0 ], [ %rd16 + 0 ], 0x10, %r41;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd17, %rd66, 2048;
	add.s64 	%rd79, %rd3, %rd69;
	add.s64 	%rd18, %rd79, 2048;
	add.s64 	%rd80, %rd3, %rd73;
	add.s64 	%rd19, %rd80, 2048;
	add.s64 	%rd81, %rd3, %rd77;
	add.s64 	%rd20, %rd81, 2048;
	.loc	1 58 20
	add.s32 	%r158, %r132, 16384;
	add.s32 	%r42, %r158, %r145;
	add.s32 	%r44, %r158, %r147;
	add.s32 	%r46, %r158, %r149;
	add.s32 	%r48, %r158, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r42 + 0 ], [ %rd17 + 0 ], 0x10, %r35;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r44 + 0 ], [ %rd18 + 0 ], 0x10, %r37;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r46 + 0 ], [ %rd19 + 0 ], 0x10, %r39;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r48 + 0 ], [ %rd20 + 0 ], 0x10, %r41;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 52 32
	or.b32  	%r159, %r1, 1024;
	.loc	1 52 41
	or.b32  	%r160, %r159, %r137;
	or.b32  	%r161, %r159, %r138;
	or.b32  	%r162, %r159, %r139;
	or.b32  	%r163, %r159, %r140;
	.loc	1 54 25
	setp.lt.s32 	%p51, %r160, %r16;
	setp.lt.s32 	%p50, %r161, %r16;
	setp.lt.s32 	%p49, %r162, %r16;
	setp.lt.s32 	%p48, %r163, %r16;
	.loc	1 57 28
	add.s64 	%rd21, %rd65, 4096;
	add.s64 	%rd22, %rd70, 4096;
	add.s64 	%rd23, %rd74, 4096;
	add.s64 	%rd24, %rd78, 4096;
	.loc	1 57 20
	add.s32 	%r164, %r132, 4096;
	add.s32 	%r50, %r164, %r145;
	add.s32 	%r52, %r164, %r147;
	add.s32 	%r54, %r164, %r149;
	add.s32 	%r56, %r164, %r151;
	selp.b32 	%r51, 16, 0, %p51;
	// begin inline asm
	cp.async.cg.shared.global [ %r50 + 0 ], [ %rd21 + 0 ], 0x10, %r51;
	// end inline asm
	selp.b32 	%r53, 16, 0, %p50;
	// begin inline asm
	cp.async.cg.shared.global [ %r52 + 0 ], [ %rd22 + 0 ], 0x10, %r53;
	// end inline asm
	selp.b32 	%r55, 16, 0, %p49;
	// begin inline asm
	cp.async.cg.shared.global [ %r54 + 0 ], [ %rd23 + 0 ], 0x10, %r55;
	// end inline asm
	selp.b32 	%r57, 16, 0, %p48;
	// begin inline asm
	cp.async.cg.shared.global [ %r56 + 0 ], [ %rd24 + 0 ], 0x10, %r57;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd25, %rd66, 4096;
	add.s64 	%rd26, %rd79, 4096;
	add.s64 	%rd27, %rd80, 4096;
	add.s64 	%rd28, %rd81, 4096;
	.loc	1 58 20
	add.s32 	%r165, %r132, 18432;
	add.s32 	%r58, %r165, %r145;
	add.s32 	%r60, %r165, %r147;
	add.s32 	%r62, %r165, %r149;
	add.s32 	%r64, %r165, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r58 + 0 ], [ %rd25 + 0 ], 0x10, %r51;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r60 + 0 ], [ %rd26 + 0 ], 0x10, %r53;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd27 + 0 ], 0x10, %r55;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r64 + 0 ], [ %rd28 + 0 ], 0x10, %r57;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 52 32
	or.b32  	%r166, %r1, 1536;
	.loc	1 52 41
	or.b32  	%r167, %r166, %r137;
	or.b32  	%r168, %r166, %r138;
	or.b32  	%r169, %r166, %r139;
	or.b32  	%r170, %r166, %r140;
	.loc	1 54 25
	setp.lt.s32 	%p47, %r167, %r16;
	setp.lt.s32 	%p46, %r168, %r16;
	setp.lt.s32 	%p45, %r169, %r16;
	setp.lt.s32 	%p44, %r170, %r16;
	.loc	1 57 28
	add.s64 	%rd29, %rd65, 6144;
	add.s64 	%rd30, %rd70, 6144;
	add.s64 	%rd31, %rd74, 6144;
	add.s64 	%rd32, %rd78, 6144;
	.loc	1 57 20
	add.s32 	%r171, %r132, 6144;
	add.s32 	%r66, %r171, %r145;
	add.s32 	%r68, %r171, %r147;
	add.s32 	%r70, %r171, %r149;
	add.s32 	%r72, %r171, %r151;
	selp.b32 	%r67, 16, 0, %p47;
	// begin inline asm
	cp.async.cg.shared.global [ %r66 + 0 ], [ %rd29 + 0 ], 0x10, %r67;
	// end inline asm
	selp.b32 	%r69, 16, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r68 + 0 ], [ %rd30 + 0 ], 0x10, %r69;
	// end inline asm
	selp.b32 	%r71, 16, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r70 + 0 ], [ %rd31 + 0 ], 0x10, %r71;
	// end inline asm
	selp.b32 	%r73, 16, 0, %p44;
	// begin inline asm
	cp.async.cg.shared.global [ %r72 + 0 ], [ %rd32 + 0 ], 0x10, %r73;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd33, %rd66, 6144;
	add.s64 	%rd34, %rd79, 6144;
	add.s64 	%rd35, %rd80, 6144;
	add.s64 	%rd36, %rd81, 6144;
	.loc	1 58 20
	add.s32 	%r172, %r132, 20480;
	add.s32 	%r74, %r172, %r145;
	add.s32 	%r76, %r172, %r147;
	add.s32 	%r78, %r172, %r149;
	add.s32 	%r80, %r172, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r74 + 0 ], [ %rd33 + 0 ], 0x10, %r67;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r76 + 0 ], [ %rd34 + 0 ], 0x10, %r69;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r78 + 0 ], [ %rd35 + 0 ], 0x10, %r71;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r80 + 0 ], [ %rd36 + 0 ], 0x10, %r73;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 52 32
	add.s32 	%r173, %r1, 2048;
	.loc	1 52 41
	or.b32  	%r174, %r173, %r137;
	.loc	1 57 28
	mul.wide.s32 	%rd82, %r174, 4;
	add.s64 	%rd37, %rd2, %rd82;
	cvt.s64.s32 	%rd83, %r173;
	or.b64  	%rd84, %rd83, %rd1;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd86, %rd2, %rd85;
	add.s64 	%rd38, %rd86, 512;
	add.s64 	%rd39, %rd86, 1024;
	add.s64 	%rd40, %rd86, 1536;
	.loc	1 57 20
	add.s32 	%r175, %r132, 8192;
	add.s32 	%r82, %r175, %r145;
	add.s32 	%r84, %r175, %r147;
	add.s32 	%r86, %r175, %r149;
	add.s32 	%r88, %r175, %r151;
	mov.b32 	%r83, 0;
	// begin inline asm
	cp.async.cg.shared.global [ %r82 + 0 ], [ %rd37 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r84 + 0 ], [ %rd38 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r86 + 0 ], [ %rd39 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r88 + 0 ], [ %rd40 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd41, %rd3, %rd82;
	add.s64 	%rd87, %rd3, %rd85;
	add.s64 	%rd42, %rd87, 512;
	add.s64 	%rd43, %rd87, 1024;
	add.s64 	%rd44, %rd87, 1536;
	.loc	1 58 20
	add.s32 	%r176, %r132, 22528;
	add.s32 	%r90, %r176, %r145;
	add.s32 	%r92, %r176, %r147;
	add.s32 	%r94, %r176, %r149;
	add.s32 	%r96, %r176, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r90 + 0 ], [ %rd41 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r92 + 0 ], [ %rd42 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r94 + 0 ], [ %rd43 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r96 + 0 ], [ %rd44 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 52 32
	add.s32 	%r177, %r1, 2560;
	.loc	1 52 41
	or.b32  	%r178, %r177, %r137;
	.loc	1 57 28
	mul.wide.s32 	%rd88, %r178, 4;
	add.s64 	%rd45, %rd2, %rd88;
	cvt.s64.s32 	%rd89, %r177;
	or.b64  	%rd90, %rd89, %rd1;
	shl.b64 	%rd91, %rd90, 2;
	add.s64 	%rd92, %rd2, %rd91;
	add.s64 	%rd46, %rd92, 512;
	add.s64 	%rd47, %rd92, 1024;
	add.s64 	%rd48, %rd92, 1536;
	.loc	1 57 20
	add.s32 	%r179, %r132, 10240;
	add.s32 	%r98, %r179, %r145;
	add.s32 	%r100, %r179, %r147;
	add.s32 	%r102, %r179, %r149;
	add.s32 	%r104, %r179, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r98 + 0 ], [ %rd45 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r100 + 0 ], [ %rd46 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r102 + 0 ], [ %rd47 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r104 + 0 ], [ %rd48 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd49, %rd3, %rd88;
	add.s64 	%rd93, %rd3, %rd91;
	add.s64 	%rd50, %rd93, 512;
	add.s64 	%rd51, %rd93, 1024;
	add.s64 	%rd52, %rd93, 1536;
	.loc	1 58 20
	add.s32 	%r180, %r132, 24576;
	add.s32 	%r106, %r180, %r145;
	add.s32 	%r108, %r180, %r147;
	add.s32 	%r110, %r180, %r149;
	add.s32 	%r112, %r180, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r106 + 0 ], [ %rd49 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r108 + 0 ], [ %rd50 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r110 + 0 ], [ %rd51 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r112 + 0 ], [ %rd52 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 52 32
	add.s32 	%r181, %r1, 3072;
	.loc	1 52 41
	or.b32  	%r182, %r181, %r137;
	.loc	1 57 28
	mul.wide.s32 	%rd94, %r182, 4;
	add.s64 	%rd53, %rd2, %rd94;
	cvt.s64.s32 	%rd95, %r181;
	or.b64  	%rd96, %rd95, %rd1;
	shl.b64 	%rd97, %rd96, 2;
	add.s64 	%rd98, %rd2, %rd97;
	add.s64 	%rd54, %rd98, 512;
	add.s64 	%rd55, %rd98, 1024;
	add.s64 	%rd56, %rd98, 1536;
	.loc	1 57 20
	add.s32 	%r183, %r132, 12288;
	add.s32 	%r114, %r183, %r145;
	add.s32 	%r116, %r183, %r147;
	add.s32 	%r118, %r183, %r149;
	add.s32 	%r120, %r183, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r114 + 0 ], [ %rd53 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r116 + 0 ], [ %rd54 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r118 + 0 ], [ %rd55 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r120 + 0 ], [ %rd56 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd57, %rd3, %rd94;
	add.s64 	%rd99, %rd3, %rd97;
	add.s64 	%rd58, %rd99, 512;
	add.s64 	%rd59, %rd99, 1024;
	add.s64 	%rd60, %rd99, 1536;
	.loc	1 58 20
	add.s32 	%r184, %r132, 26624;
	add.s32 	%r122, %r184, %r145;
	add.s32 	%r124, %r184, %r147;
	add.s32 	%r126, %r184, %r149;
	add.s32 	%r128, %r184, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r122 + 0 ], [ %rd57 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r124 + 0 ], [ %rd58 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r126 + 0 ], [ %rd59 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r128 + 0 ], [ %rd60 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 57 20
	// begin inline asm
	cp.async.wait_group 0xc;
	// end inline asm
	mov.b32 	%r254, 6;
	mov.b32 	%r250, -512;
	mov.u32 	%r251, %r131;
	mov.u32 	%r252, %r132;
	mov.u32 	%r253, %r83;
$L__BB0_1:
	.loc	1 0 20
	mov.pred 	%p28, %p55;
	mov.pred 	%p27, %p54;
	mov.pred 	%p26, %p53;
	mov.pred 	%p25, %p52;
	mov.pred 	%p55, %p51;
	mov.pred 	%p54, %p50;
	mov.pred 	%p53, %p49;
	mov.pred 	%p52, %p48;
	mov.pred 	%p51, %p47;
	mov.pred 	%p50, %p46;
	mov.pred 	%p49, %p45;
	mov.pred 	%p48, %p44;
	cvt.u32.u64 	%r217, %rd1;
	.loc	1 54 25
	add.s32 	%r218, %r2, %r250;
	add.s32 	%r219, %r218, 2944;
	add.s32 	%r220, %r218, 896;
	add.s32 	%r221, %r218, 2816;
	add.s32 	%r222, %r218, 768;
	add.s32 	%r223, %r218, 2688;
	add.s32 	%r224, %r218, 640;
	add.s32 	%r225, %r218, 2560;
	add.s32 	%r226, %r218, 512;
	setp.lt.s32 	%p44, %r219, %r16;
	setp.lt.s32 	%p45, %r221, %r16;
	setp.lt.s32 	%p46, %r223, %r16;
	setp.lt.s32 	%p47, %r225, %r16;
	.loc	1 57 20
	shl.b32 	%r227, %r217, 2;
	add.s32 	%r228, %r252, %r227;
	add.s32 	%r230, %r252, %r147;
	add.s32 	%r232, %r252, %r149;
	add.s32 	%r234, %r252, %r151;
	ld.shared.v4.f32 	{%f1, %f2, %f3, %f4}, [%r228];
	ld.shared.v4.f32 	{%f5, %f6, %f7, %f8}, [%r230];
	ld.shared.v4.f32 	{%f9, %f10, %f11, %f12}, [%r232];
	ld.shared.v4.f32 	{%f13, %f14, %f15, %f16}, [%r234];
	.loc	1 58 20
	add.s32 	%r235, %r251, %r227;
	add.s32 	%r236, %r251, %r147;
	add.s32 	%r237, %r251, %r149;
	add.s32 	%r238, %r251, %r151;
	ld.shared.v4.f32 	{%f17, %f18, %f19, %f20}, [%r235];
	ld.shared.v4.f32 	{%f21, %f22, %f23, %f24}, [%r236];
	ld.shared.v4.f32 	{%f25, %f26, %f27, %f28}, [%r237];
	ld.shared.v4.f32 	{%f29, %f30, %f31, %f32}, [%r238];
	.loc	1 59 21
	add.f32 	%f33, %f1, %f17;
	add.f32 	%f34, %f2, %f18;
	add.f32 	%f35, %f3, %f19;
	add.f32 	%f36, %f4, %f20;
	add.f32 	%f37, %f5, %f21;
	add.f32 	%f38, %f6, %f22;
	add.f32 	%f39, %f7, %f23;
	add.f32 	%f40, %f8, %f24;
	add.f32 	%f41, %f9, %f25;
	add.f32 	%f42, %f10, %f26;
	add.f32 	%f43, %f11, %f27;
	add.f32 	%f44, %f12, %f28;
	add.f32 	%f45, %f13, %f29;
	add.f32 	%f46, %f14, %f30;
	add.f32 	%f47, %f15, %f31;
	add.f32 	%f48, %f16, %f32;
	.loc	1 61 30
	mul.wide.s32 	%rd112, %r226, 4;
	add.s64 	%rd100, %rd4, %rd112;
	mul.wide.s32 	%rd113, %r224, 4;
	add.s64 	%rd101, %rd4, %rd113;
	mul.wide.s32 	%rd114, %r222, 4;
	add.s64 	%rd102, %rd4, %rd114;
	mul.wide.s32 	%rd115, %r220, 4;
	add.s64 	%rd103, %rd4, %rd115;
	.loc	1 61 39
	mov.b32 	%r185, %f33;
	mov.b32 	%r186, %f34;
	mov.b32 	%r187, %f35;
	mov.b32 	%r188, %f36;
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd100 + 0 ], { %r185, %r186, %r187, %r188 };
	// end inline asm
	mov.b32 	%r189, %f37;
	mov.b32 	%r190, %f38;
	mov.b32 	%r191, %f39;
	mov.b32 	%r192, %f40;
	// begin inline asm
	@%p58 st.global.v4.b32 [ %rd101 + 0 ], { %r189, %r190, %r191, %r192 };
	// end inline asm
	mov.b32 	%r193, %f41;
	mov.b32 	%r194, %f42;
	mov.b32 	%r195, %f43;
	mov.b32 	%r196, %f44;
	// begin inline asm
	@%p57 st.global.v4.b32 [ %rd102 + 0 ], { %r193, %r194, %r195, %r196 };
	// end inline asm
	mov.b32 	%r197, %f45;
	mov.b32 	%r198, %f46;
	mov.b32 	%r199, %f47;
	mov.b32 	%r200, %f48;
	// begin inline asm
	@%p56 st.global.v4.b32 [ %rd103 + 0 ], { %r197, %r198, %r199, %r200 };
	// end inline asm
	.loc	1 52 41
	add.s32 	%r239, %r1, %r250;
	add.s32 	%r240, %r239, 4096;
	add.s32 	%r241, %r218, 4096;
	.loc	1 57 28
	mul.wide.s32 	%rd116, %r241, 4;
	add.s64 	%rd104, %rd2, %rd116;
	cvt.s64.s32 	%rd117, %r240;
	add.s64 	%rd118, %rd117, %rd1;
	shl.b64 	%rd119, %rd118, 2;
	add.s64 	%rd120, %rd2, %rd119;
	add.s64 	%rd105, %rd120, 512;
	add.s64 	%rd106, %rd120, 1024;
	add.s64 	%rd107, %rd120, 1536;
	.loc	1 51 39
	add.s32 	%r242, %r254, 1;
	setp.lt.s32 	%p41, %r242, 7;
	selp.b32 	%r254, %r242, 0, %p41;
	.loc	1 57 20
	shl.b32 	%r243, %r254, 11;
	add.s32 	%r245, %r132, %r243;
	add.s32 	%r201, %r245, %r227;
	add.s32 	%r203, %r245, %r147;
	add.s32 	%r205, %r245, %r149;
	add.s32 	%r207, %r245, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r201 + 0 ], [ %rd104 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r203 + 0 ], [ %rd105 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r205 + 0 ], [ %rd106 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r207 + 0 ], [ %rd107 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 58 28
	add.s64 	%rd108, %rd3, %rd116;
	add.s64 	%rd121, %rd3, %rd119;
	add.s64 	%rd109, %rd121, 512;
	add.s64 	%rd110, %rd121, 1024;
	add.s64 	%rd111, %rd121, 1536;
	.loc	1 58 20
	add.s32 	%r247, %r131, %r243;
	add.s32 	%r209, %r247, %r227;
	add.s32 	%r211, %r247, %r147;
	add.s32 	%r213, %r247, %r149;
	add.s32 	%r215, %r247, %r151;
	// begin inline asm
	cp.async.cg.shared.global [ %r209 + 0 ], [ %rd108 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r211 + 0 ], [ %rd109 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r213 + 0 ], [ %rd110 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r215 + 0 ], [ %rd111 + 0 ], 0x10, %r83;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 51 39
	add.s32 	%r248, %r253, 1;
	setp.lt.s32 	%p42, %r248, 7;
	selp.b32 	%r253, %r248, 0, %p42;
	.loc	1 57 20
	// begin inline asm
	cp.async.wait_group 0xc;
	// end inline asm
	shl.b32 	%r249, %r253, 11;
	add.s32 	%r252, %r132, %r249;
	.loc	1 58 20
	add.s32 	%r251, %r131, %r249;
	.loc	1 51 39
	add.s32 	%r250, %r250, 512;
	setp.lt.u32 	%p43, %r250, 1536;
	mov.pred 	%p56, %p25;
	mov.pred 	%p57, %p26;
	mov.pred 	%p58, %p27;
	mov.pred 	%p59, %p28;
	@%p43 bra 	$L__BB0_1;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	.loc	1 51 4
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/home/hoy/triton/python/tutorials/01-vector-add.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 88
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 48
.b8 49
.b8 45
.b8 118
.b8 101
.b8 99
.b8 116
.b8 111
.b8 114
.b8 45
.b8 97
.b8 100
.b8 100
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 104
.b8 111
.b8 121
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 47
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 115
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
